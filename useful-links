TOP = https://devopsand.beer/2022/03/26/immutable-Infrastructure-with-ansible-packer-and-terraform-on-azure/

az sig image-definition create --resource-group <my-rg> --gallery-name <my_shared_image_gallery> --gallery-image-definition <my-ubuntu18> --publisher <company> --offer UbuntuServer --sku 18.04-LTS --os-type linux

az login
az account show | jq '.tenantID'
az account list --query "[?tenantId=='<tenantId>'].{Name:name,ID:id}" --output Table
az account set --subscription "<subscription_id_or_subscription_name>"
az ad sp create-for-rbac --name "<service_principal_name>"
az account list --query [*].[name,id]

az login
az account show | jq '.tenantID'
az account list --query "[?tenantId=='<tenantId>'].{Name:name,ID:id}" --output Table
az account set --subscription "<subscription_id_or_subscription_name>"
az ad sp create-for-rbac --name "<service_principal_name>"

az vm image list --location westus --publisher Canonical --offer UbuntuServer --sku 16.04.0-LTS --allA
# Find all Gen2 SKUs published by Microsoft Windows Desktop
az vm image list --publisher MicrosoftWindowsDesktop --sku g2 --output table --all

# Find all Gen2 SKUs published by Canonical
az vm image list --publisher Canonical --sku gen2 --output table --all

=====
accept aggreement on CIS URL = az vm image terms accept --urn center-for-internet-security-inc:cis-ubuntu-linux-2004-l1:cis-ubuntu2004-l1:1.0.3 --subscription {YOUR_SUB_ID}

az account list | tail -n15

az group create --name packerdemo --location "West US 3"
az storage account create -g packerdemo -n packerdemoStorageAccount  --location "West US 3"
=======




------
https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27010
https://stackoverflow.com/questions/63371596/gitlab-runner-docker-image

dockerfile = https://github.com/ericmaino/azure-gitlab-runner.git
How to install configure and register GitLab runne = https://cloudaffaire.com/how-to-install-configure-and-register-gitlab-runner/
https://www.fosstechnix.com/how-to-install-gitlab-runner-on-ubuntu/
https://testdriven.io/blog/gitlab-ci-docker/
https://repository.unesco.org/gitlab/help/ci/runners/configure_runners.md

windowr-runner = https://holdmybeersecurity.com/2021/02/19/devops-tales-install-setup-gitlab-gitlab-runners-on-docker-windows-linux-and-macos/
https://www.insight-tec.com/tech-blog/ci-cd/20201222_gitlab_runner/
https://docs.gitlab.com/runner/examples/gitlab.html
https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4738
https://docs.gitlab.com/runner/configuration/autoscale.html
https://www.digitalocean.com/community/tutorials/how-to-autoscale-gitlab-continuous-deployment-with-gitlab-runner-on-digitalocean
https://docs.fuga.cloud/how-to-autoscale-your-gitlab-runners-on-openstack

======
Create a user for GitLab Runner.

sudo useradd --comment 'GitLab Runner' --create-home gitlab-runner --shell /bin/bash

https://blog.opstree.com/2018/12/03/gitlab-ci-with-nexus/

=====

## --------
## Linux OS
## --------
 
## Download the binary for your system
sudo curl -L --output /usr/local/bin/gitlab-runner \
https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64
 
## Give it permissions to execute
sudo chmod +x /usr/local/bin/gitlab-runner
 
## Create a GitLab CI user
sudo useradd --comment 'GitLab Runner' --create-home gitlab-runner --shell /bin/bash
 
## Install and run as service
sudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner
sudo gitlab-runner start
 
## Check if the installation was successful
gitlab-runner --version
 
## ------
## MAC OS
## ------
 
## Download the binary for your system
sudo curl --output /usr/local/bin/gitlab-runner \
https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-amd64
 
## Give it permissions to execute
sudo chmod +x /usr/local/bin/gitlab-runner
 
## Install and run as service
cd ~
gitlab-runner install
gitlab-runner start
 
## Check if the installation was successful
gitlab-runner --version
 
## ----------
## Windows OS
## ----------
 
## Open a PowerShell session as admin
## Create a folder somewhere in your system ex.: C:\GitLab-Runner
New-Item -Path 'C:\GitLab-Runner' -ItemType Directory
 
## Enter the folder
cd 'C:\GitLab-Runner'
 
## Dowload binary
Invoke-WebRequest -Uri "https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-windows-amd64.exe" `
-OutFile "gitlab-runner.exe"
 
## Install and run as service
.\gitlab-runner.exe install
.\gitlab-runner.exe start
 
## Check if the installation was successful
gitlab-runner --version
=====




/etc/gitlab-runner/config.toml exists already on ubuntu but not alpine
$ docker run --rm -it   --entrypoint /bin/bash   gitlab/gitlab-runner:alpine-v12.9 -c 'cat /etc/gitlab-runner/config.toml'
cat: can't open '/etc/gitlab-runner/config.toml': No such file or directory
versus

$ docker run --rm -it   --entrypoint /bin/bash   gitlab/gitlab-runner:ubuntu-v12.9.0 -c 'cat /etc/gitlab-runner/config.toml'
concurrent = 1
check_interval = 0

[session_server]
  session_timeout = 1800

  -----
  ----
# /etc/gitlab-runner/config.toml

[[runners]]
 ...
 [runers.docker]
 image = "docker:stable"
 volumes = ["/var/run/docker.sock:/var/run/docker.sock"]


  ----

------
[[runners]]
  name = "ruby-2.1-docker"
  url = "https://CI/"
  token = "TOKEN"
  limit = 0
  executor = "docker"
  builds_dir = ""
  shell = ""
  environment = ["ENV=value", "LC_ALL=en_US.UTF-8"]
  disable_verbose = false
-----



  ====

# /etc/gitlab-runner/config.toml

concurrent = 10

[[runners]]
  name = "gitlab-ci-runner-bastion"
  url = "https://gitlab.com/"
  token = "our-own-gitlab-token-goes-here"
  executor = "docker+machine"
  [runners.docker]
    tls_verify = false
    image = "docker:19.03.12"
    privileged = true
    disable_entrypoint_overwrite = false
    oom_kill_disable = false
    disable_cache = false
    volumes = ["/certs/client", "/cache"]
    shm_size = 0
  [runners.machine]
    # . . . to be completed below



This configuration will make Gitlab able to run up to 10 jobs at the same time, using docker containers supporting docker-in-docker features.

Now, letâ€™s go to the runners.machine option. Given the AWS example documented in the official page:
    -----

# . . . remaining part of /etc/gitlab-runner/config.toml

[runners.machine]
  MachineDriver = "amazonec2"
  MachineName = "gitlab-docker-machine-%s"
  MachineOptions = [
    "amazonec2-access-key=XXXX",
    "amazonec2-secret-key=XXXX",
    "amazonec2-region=us-central-1",
    "amazonec2-vpc-id=vpc-xxxxx",
    "amazonec2-subnet-id=subnet-xxxxx",
    "amazonec2-use-private-address=true",
    "amazonec2-tags=runner-manager-name,gitlab-aws-autoscaler,gitlab,true,gitlab-runner-autoscale,true",
    "amazonec2-security-group=docker-machine-scaler",
    "amazonec2-instance-type=m4.2xlarge",
  ]



  ------


# . . . remaining part of /etc/gitlab-runner/config.toml

[runners.machine]
  MachineDriver = "google"
  MachineName = "gitlab-docker-machine-%s"
  MachineOptions = [
    "google-project=xxxxx",
    "google-network=xxxxx",
    "google-subnetwork=xxxxx",
    "google-use-internal-ip=true",
    "google-machine-type=e2-standard-4",
    "google-disk-size=10",
    "google-disk-type=pd-standard",
    "google-machine-image=https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts",
    "google-username=root",
  ]


  -----


# . . . remaining part of /etc/gitlab-runner/config.toml

[runners.machine]
  MachineDriver = "azure"
  MachineName = "gitlab-docker-machine-%s"
  MachineOptions = [
    "azure-subscription-id=xxx",
    "azure-client-id=xxx",
    "azure-client-secret=xxx",
    "azure-resource-group=gitlab-ci",
    "azure-location=eastus",
    "azure-size=Standard_B2ms",
    "azure-storage-type=Standard_LRS",
  ]

  =-----
    # Add docker volume
    cat >> /etc/gitlab-runner/config.toml << EOF

          [[runners.kubernetes.volumes.host_path]]
            name = "var-run-docker-sock"
            mount_path = "/var/run/docker.sock"
    EOF

  =====
----


https://www.onuryasarlar.com/azure/azure-infrastructure-automation-with-gitlab-ci

https://www.onuryasarlar.com/azure/azure-infrastructure-automation-with-gitlab-ci

https://gitlab.com/yasarlaro/azure-arm-templates/-/tree/main/
https://blog.danielkomaz.com/setup-an-iac-pipeline-to-azure-using-github-gitlab-part-2-write-terraform-code-and-prepare-azure/
https://www.onuryasarlar.com/azure/azure-infrastructure-automation-with-gitlab-ci

https://gist.githubusercontent.com/nicosingh/6b1b062020e583d1309b6bcd51745526/raw/d2413d120d1bec5e67b9d49f6f42f254bfb43c7a/config.azure.toml

# . . . remaining part of /etc/gitlab-runner/config.toml

[runners.machine]
  MachineDriver = "azure"
  MachineName = "gitlab-docker-machine-%s"
  MachineOptions = [
    "azure-subscription-id=xxx",
    "azure-client-id=xxx",
    "azure-client-secret=xxx",
    "azure-resource-group=gitlab-ci",
    "azure-location=eastus",
    "azure-size=Standard_B2ms",
    "azure-storage-type=Standard_LRS",
  ]



https://www.onuryasarlar.com/azure/azure-infrastructure-automation-with-gitlab-ci



AZURE-DEVOPS=
https://github.com/Ruthhl3ss/public/blob/main/Packer-Templates/Windows10AVDImage.pkr.hcl
https://github.com/TheSmallHumanCloud/azure-pipeline-packer-templates.git
https://github.com/schnerring/packer-windows-avd.git
WITH-GITHUB-ACTION = https://github.com/schnerring/packer-windows-avd.git
https://github.com/alexholliz/w2019-ue-agent.git
https://azuredevopslabs.com/labs/vstsextend/ansible/
ANSIBLE-PACKER= https://github.com/ssdowd/example-azure-pipeline-packer.git

https://www.nielskok.tech/azure-virtual-desktop/packer-yaml-azure-devops-pipeline-pt-1/
https://erwinstaal.nl/posts/automatically-renew-private-agent-images/
https://alven.tech/upgrade-packer-json-template-to-hcl2-for-azure-virtual-desktop/?utm_source=rss&utm_medium=rss&utm_campaign=upgrade-packer-json-template-to-hcl2-for-azure-virtual-desktop
https://faun.pub/building-vm-images-on-azure-using-packer-hcl-and-powershell-scripts-45abaaa87e1f


https://schnerring.net/blog/automate-building-custom-windows-images-for-azure-virtual-desktop-with-packer-and-github-actions/#prepare-packer-resources-with-terraform

https://yetiops.net/posts/packer-ansible-windows-aws/

https://github.com/hashicorp/packer-plugin-azure/blob/main/example/rhel.json
https://iluizsousa22.medium.com/descomplicando-o-hardening-de-imagens-ec2-6a99ad654e24

https://github.com/andersulf/iac-packer-ansible-azure-VM.git

https://www.infralovers.com/en/articles/2021/12/13/simplify-virtual-machine-templates-with-packer-for-any-cloud/

https://github.com/chrisvugrinec/azure-packer-demo

packer = https://installati.one/debian/9/packer/

{
  "builders": [{
    "type": "azure-arm",

    "client_id": "f5b6a5cf-fbdf-4a9f-b3b8-3c2cd00225a4",
    "client_secret": "0e760437-bf34-4aad-9f8d-870be799c55d",
    "tenant_id": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "subscription_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx",

    "managed_image_resource_group_name": "myResourceGroup",
    "managed_image_name": "myPackerImage",

    "os_type": "Linux",
    "image_publisher": "Canonical",
    "image_offer": "UbuntuServer",
    "image_sku": "16.04-LTS",

    "azure_tags": {
        "dept": "Engineering",
        "task": "Image deployment"
    },

    "location": "East US",
    "vm_size": "Standard_DS2_v2"
  }],
  "provisioners": [{
    "execute_command": "chmod +x {{ .Path }}; {{ .Vars }} sudo -E sh '{{ .Path }}'",
    "inline": [
      "apt-get update",
      "apt-get upgrade -y",
      "apt-get -y install nginx",

      "/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync"
    ],
    "inline_shebang": "/bin/sh -x",
    "type": "shell"
  }]
}

-------===================
    "provisioners": [
        {
          "type": "powershell",
          "script": "./scripts/ConfigureRemotingForAnsible.ps1"
        }, 
          {
            "type": "ansible",
            "playbook_file": "./playbooks/nginx.yaml",  
            "user": "packer",
            "use_proxy": false,
            "extra_arguments": ["-e", "ansible_winrm_server_cert_validation=ignore"]
        },
        {
          "type": "powershell",
          "script" : "./scripts/sysprep.ps1"
        }]
  }
==============================


SUPER= https://github.com/svenikea/terraform-packer-ansible.git
terraform-pre-commit = https://github.com/Mikroways/windows-packer-terraform-libvirt/blob/main/.github/workflows/lint.yml
WINDOW = https://github.com/Mikroways/windows-packer-terraform-libvirt.git
https://boredconsultant.com/2022/03/02/Azure-VM-Deployment-With-Ansible/
https://github.com/Alex-developpeur/Ansible-Packer-Terraform.git
https://devopscube.com/packer-tutorial-for-beginners/
https://faun.pub/building-vm-images-on-azure-using-packer-hcl-and-powershell-scripts-45abaaa87e1f
packer =  https://docs.microsoft.com/en-us/azure/developer/terraform/create-vm-scaleset-network-disks-using-packer-hcl
packer =  https://www.infralovers.com/en/articles/2021/11/15/automate-virtual-machine-templates-with-packer-for-azure/
https://jmorano.moretrix.com/2022/04/using-ansible-to-finalize-hashicorp-packer-images/



https://github.com/PVengalRaoP/LinuxPatch.git
window = https://github.com/it-pappa/Ansible-Role_patch_windows.git
repo = https://github.com/ranjithmani/ansible-flask-patcher.git
https://github.com/Minions07/Ansible-Linux-Patching.git

checking = https://github.com/Minions07/Ansible-Patch.git

https://github.com/ttiinc/ansible-serverpatching-edc.git

https://github.com/msgarbossa/auto_patch.git
https://github.com/my0373/ansible_rhel_patch.git
https://github.com/naveensangadala/ansible-linux-os-patching.git
https://github.com/arikkert/ansible-role_centos8repo.git


patch window= https://docs.ansible.com/ansible/latest/collections/ansible/windows/win_updates_module.html
https://github.com/poojanagalikar/ansible-patch-1.git
https://github.com/arpanrec/ansible-role-linux-patching.git
https://github.com/KKarani1/Ansible.git

ansible-playbook -i hosts main.yml --extra-vars @params.yml -vvvv





https://buildvirtual.net/how-to-deploy-wvd-session-hosts-using-terraform/

https://docs.microsoft.com/en-us/azure/developer/terraform/create-linux-virtual-machine-with-infrastructure
https://stackoverflow.com/questions/68389589/enable-azure-monitor-for-existing-virtual-machines-using-terraform

ansible-patching= https://github.com/het-tanis/ansible_patching.git
https://stackoverflow.com/questions/68389589/enable-azure-monitor-for-existing-virtual-machines-using-terraform

https://docs.microsoft.com/en-us/azure/developer/terraform/create-vm-cluster-with-infrastructure

az vm list -g acctestrg --query "[].{\"VM Name\":name}" -o table

https://stackoverflow.com/questions/66633650/terraform-enable-vm-insights

https://github.com/terraform-azurerm-modules/terraform-azurerm-aad-windows-vm.git


=====

If you donâ€™t have the az CLI on your machine, you can install it.

Log into Azure:

 az login
Check how many subscriptions we have for this tenant:

 az account list --output table
Set the right subscription for our deployment:

 az account set --subscription "XXXXXX-XXXXXXX-XXXX-XXX"
 az account set --subscription subscription-name


======
